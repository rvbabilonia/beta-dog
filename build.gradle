plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'org.unbroken-dome.test-sets' version '2.2.1'
    id 'org.owasp.dependencycheck' version '5.3.0'
    id 'com.github.ben-manes.versions' version '0.28.0'
}

ext {
    springCloudVersion = 'Hoxton.SR1'
    reactorVersion = '1.0.1.RELEASE'
    htmlToPojoVersion = '1.0.2'
    commonsLangVersion = '3.9'
    springdocOpenapiWebfluxVersion = '1.2.33'
    caffeineVersion = '2.8.1'

    assertjVersion = '3.15.0'
    mockitoVersion = '3.3.1'
    restAssuredVersion = '4.2.0'
    okhttpVersion = '4.4.1'
    reactorTestVersion = '3.3.3.RELEASE'
}

group 'nz.org.vincenzo'
def onTravisCI = System.getenv("TRAVIS_BUILD_NUMBER") != null
project.ext.set("buildNumber", onTravisCI ? System.getenv("TRAVIS_BUILD_NUMBER") : "DEV-SNAPSHOT")
def versionNumber = System.getenv("VERSION_NUMBER") != null ? System.getenv("VERSION_NUMBER") : "1.0"
version = "$versionNumber.$project.ext.buildNumber"
sourceCompatibility = '11'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    implementation "org.projectreactor:reactor-spring:$reactorVersion"
    implementation("fr.whimtrip:whimtrip-ext-htmltopojo:$htmlToPojoVersion") {
        exclude group: "org.slf4j", module: "slf4j-simple"
    }
    implementation "org.apache.commons:commons-lang3:$commonsLangVersion"
    implementation "org.springdoc:springdoc-openapi-webflux-core:$springdocOpenapiWebfluxVersion"
    implementation "org.springdoc:springdoc-openapi-webflux-ui:$springdocOpenapiWebfluxVersion"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "io.rest-assured:spring-web-test-client:$restAssuredVersion"
    testImplementation "io.rest-assured:xml-path:$restAssuredVersion"
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    testImplementation "io.rest-assured:rest-assured-common:$restAssuredVersion"
    testImplementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "io.projectreactor:reactor-test:$reactorTestVersion"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

test {
    useJUnitPlatform()
}

dependencyUpdates {
    gradleReleaseChannel = 'current'
    resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                def version = selection.candidate.version.toLowerCase()
                if (version.contains('alpha') || version.contains('beta')
                        || version.contains('snapshot') || version.contains('rc')
                        || version ==~ '[0-9]+\\.[0-9]+\\.[0-9]+(?:-b|.m|-M)[0-9]+(\\.)?[0-9]*') {
                    selection.reject('Not a release')
                }
            }
        }
    }
}

testSets {
    integrationTest
}

bootJar {
    mainClassName = "nz.org.vincenzo.betadog.BetaDogApplication"
}

task copyYml(type: Copy) {
    from 'src/main/resources/application.yml'
    into 'build'
}

task copyDocker(type: Copy) {
    from 'docker/release'
    into 'build'
}

build.dependsOn copyDocker, copyYml, bootJar
